use crate::ast::*;
use crate::util::append_u32;

_ = #quiet<[ \t]*>

//any whitespace, but must include at least one newline
__ = #quiet<[ \t]* ("\n"/":") [ \t\n]*>



expression_atom -> Expr<'input> = invert / deref_byte / fun_call / var / number_literal / deref / var_address / parens

ident -> &'input str = i:$([a-zA-Z_][a-zA-Z0-9_]*)
    { i }

decimal -> Expr<'input> = n:$([0-9]+)
    { Expr::Literal(n.parse::<u32>().unwrap()) }

hex -> Expr<'input> = "0x" n:$([0-9A-Fa-f]+)
    { Expr::Literal(u32::from_str_radix(n, 16).unwrap()) }

binary -> Expr<'input> = "0b" n:$([0-1]+)
    { Expr::Literal(u32::from_str_radix(n, 2).unwrap()) }

number_literal -> Expr<'input> = binary / hex / decimal

deref -> Expr<'input> = "[" _ e:expression _ "]" 
    { Expr::Deref(Box::new(e)) }

deref_byte -> Expr<'input> = "b[" _ e:expression _ "]"
    { Expr::DerefByte(Box::new(e)) }

var -> Expr<'input> = i:ident
    { Expr::Var(i) }

invert -> Expr<'input> = "!" _ e:expression
    { Expr::Invert(Box::new(e)) }

var_address -> Expr<'input> = "&" _ i:ident
    { Expr::VarAddress(i) }

parens -> Expr<'input> = "(" _ e:expression _ ")"
    { e }

padded_expression_atom -> Expr<'input> = _ e:expression_atom _
    { e }

fun_call_arg -> Expr<'input> = _ e:expression _
    { e }

fun_call -> Expr<'input> = i:ident _ "(" args:(fun_call_arg ** ",") ")"
    { Expr::FunCall(i, args) }


expression -> Expr<'input> = #infix<padded_expression_atom> {
    #L  x "|" y { Expr::BitOr(Box::new(x), Box::new(y)) }
    #L  x "^" y { Expr::BitXor(Box::new(x), Box::new(y)) }
    #L  x "&" y { Expr::BitAnd(Box::new(x), Box::new(y)) }
    #L  x "=" y { Expr::Eq(Box::new(x), Box::new(y)) }
        x "!=" y { Expr::Neq(Box::new(x), Box::new(y)) }
    #L  x "<" y { Expr::Lt(Box::new(x), Box::new(y)) }
        x ">" y { Expr::Gt(Box::new(x), Box::new(y)) }
        x "<=" y { Expr::Leq(Box::new(x), Box::new(y)) }
        x ">=" y { Expr::Geq(Box::new(x), Box::new(y)) }
    #L  x "<<" y { Expr::Shl(Box::new(x), Box::new(y)) }
        x ">>" y { Expr::Shr(Box::new(x), Box::new(y)) }
    #L  x "+" y { Expr::Add(Box::new(x), Box::new(y)) }
        x "-" y { Expr::Sub(Box::new(x), Box::new(y)) }
    #L  x "*" y { Expr::Mul(Box::new(x), Box::new(y)) }
        x "/" y { Expr::Div(Box::new(x), Box::new(y)) }
        x "%" y { Expr::Mod(Box::new(x), Box::new(y)) }
    
}

line -> LineData<'input> = assign / fun_declaration / label / for_loop / while_loop / if_else / if_block / goto / expr_line

assign_target_var -> AssignTarget<'input> = i:ident
    { AssignTarget::Var(i) }

assign_target_addr -> AssignTarget<'input> = "[" _ e:expression _ "]"
    { AssignTarget::Addr(e) }

assign_target_byte_addr -> AssignTarget<'input> = "b[" _ e:expression _ "]"
    { AssignTarget::ByteAddr(e) }

assign_target -> AssignTarget<'input> = assign_target_byte_addr / assign_target_var / assign_target_addr

lines -> Block<'input> = l:(line ** __)
    { l }

assign -> LineData<'input> = p:#position e:expression _ "->" _ t:assign_target
    { (p, Line::Assign(t, e)).into() }

for_loop -> LineData<'input> = p:#position "for" _ i:ident _ "," _ start:expression _ "," _ 
end:expression __ l:lines __ "end"
    { (p, Line::For(i, start, end, l)).into() }

while_loop -> LineData<'input> = p:#position "while" _ e:expression __ l:lines __ "end"
    { (p, Line::While(e, l)).into() }

if_else -> LineData<'input> = p:#position "if" _ e:expression __ l:lines __ "else" __ ll:lines __ "end"
    { (p, Line::If(e, l, Some(ll))).into() }

if_block -> LineData<'input> = p:#position "if" _ e:expression __ l:lines __ "end"
    { (p, Line::If(e, l, None)).into() }

goto -> LineData<'input> = p:#position "goto" _ n:ident
    { (p, Line::Goto(n)).into() }

label -> LineData<'input> = p:#position n:ident _ ":"
    { (p, Line::Label(n)).into() }
 
fun_arg -> &'input str = _ i:ident _
    { i }

fun_declaration -> LineData<'input> = p:#position "func" _ i:ident _ "(" args:(fun_arg ** ",") ")" __ l:lines __ "end"
    { (p, Line::FunDeclaration(i, args, l)).into() }

expr_line -> LineData<'input> = p:#position e:fun_call
    { (p, Line::Expr(e)).into() }


// DATA SEGMENT
data_zeros -> DataDef<'input> = "zeros" _ n:$([0-9]+)
    {
        let n = n.parse::<u32>().unwrap();
        DataDef::Bytes(vec![0; n as usize])
    }

data_byte_hex -> u8 = n:$([a-fA-f0-9]*<2>)
    { u8::from_str_radix(n, 16).unwrap() }

data_bytes_hex -> DataDef<'input> = "{" _ bytes:(data_byte_hex ** _ ) _ "}"
    { DataDef::Bytes(bytes) }

data_u8_dec -> DataDef<'input> = n:$([0-9]+) "b"
    { DataDef::Bytes(vec![n.parse::<u8>().unwrap(); 1]) }

data_u8_bin -> DataDef<'input> = "0b" n:$([0-1]+)
    { DataDef::Bytes(vec![u8::from_str_radix(n, 2).unwrap()]) }

data_u32_dec -> DataDef<'input> = n:$([0-9]+)
    { 
        let mut v = Vec::new();
        append_u32(&mut v, n.parse::<u32>().unwrap());
        DataDef::Bytes(v)
    }

data_label -> DataDef<'input> = n:ident _ ":"
    { DataDef::Label(n) }

data_string -> DataDef<'input> = "\"" string:$(.[^"]*) "\""
    { DataDef::Bytes(string.as_bytes().to_vec()) }

data_line -> DataDef<'input> = data_u8_bin / data_u8_dec / data_zeros / data_bytes_hex / data_label / data_string / data_u32_dec

data_segment -> DataBlock<'input> = block:(data_line ** __)
    { block }


pub program -> (DataBlock<'input>, Block<'input>) = ".DATA" __ data:data_segment __ ".CODE"  __ l:lines
    { (data, l) }