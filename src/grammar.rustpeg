use crate::ast::*;

_ = #quiet<[ \t]*>

//any whitespace, but must include at least one newline
__ = [ \t]* "\n" [ \t\n]*

pub expression_atom -> Expr<'input> = fun_call / var / number_literal / deref / var_address / parens

pub ident -> &'input str = i:$([a-zA-Z][a-zA-Z0-9]*)
    { i }

decimal -> Expr<'input> = n:$([0-9]+)
    { Expr::Literal(n.parse::<u32>().unwrap()) }

hex -> Expr<'input> = "0x" n:$([0-9A-Fa-f]+)
    { Expr::Literal(u32::from_str_radix(n, 16).unwrap()) }

binary -> Expr<'input> = "0b" n:$([0-1]+)
    { Expr::Literal(u32::from_str_radix(n, 2).unwrap()) }

number_literal -> Expr<'input> = binary / hex / decimal

deref -> Expr<'input> = "{" _ e:expression _ "}" 
    { Expr::Deref(Box::new(e)) }

var -> Expr<'input> = i:ident
    { Expr::Var(i) }

var_address -> Expr<'input> = "&" _ i:ident
    { Expr::VarAddress(i) }

parens -> Expr<'input> = "(" _ e:expression _ ")"
    { e }

padded_expression_atom -> Expr<'input> = _ e:expression_atom _
    { e }

fun_call_arg -> Expr<'input> = _ e:expression _
    { e }

fun_call -> Expr<'input> = i:ident _ "(" args:(fun_call_arg ++ ",") ")"
    { Expr::FunCall(i, args) }

pub expression -> Expr<'input> = #infix<padded_expression_atom> {
    #L  x "+" y { Expr::Add(Box::new(x), Box::new(y)) }
        x "-" y { Expr::Sub(Box::new(x), Box::new(y)) }
    #L  x "*" y { Expr::Mul(Box::new(x), Box::new(y)) }
        x "/" y { Expr::Div(Box::new(x), Box::new(y)) }
    #L  x "<" y { Expr::Lt(Box::new(x), Box::new(y)) }
        x ">" y { Expr::Gt(Box::new(x), Box::new(y)) }
        x "<=" y { Expr::Leq(Box::new(x), Box::new(y)) }
        x ">=" y { Expr::Geq(Box::new(x), Box::new(y)) }
        x "=" y { Expr::Eq(Box::new(x), Box::new(y)) }
        x "!=" y { Expr::Neq(Box::new(x), Box::new(y)) }
}

line -> Line<'input> = assign / fun_declaration / label / for_loop / while_loop / if_else / if_block / goto / expr_line

assign -> Line<'input> = e:expression _ "->" _ i:ident
    { Line::Assign(i, e) }

pub lines -> Block<'input> = l:(line ++ __)
    { l }

for_loop -> Line<'input> = "for" _ i:ident _ "," _ start:expression _ "," _ end:expression __ l:lines __ "end"
    { Line::For(i, start, end, l) }

while_loop -> Line<'input> = "while" _ e:expression __ l:lines __ "end"
    { Line::While(e, l) }

if_else -> Line<'input> = "if" _ e:expression __ l:lines __ "else" __ ll:lines __ "end"
    { Line::If(e, l, Some(ll))}

if_block -> Line<'input> = "if" _ e:expression __ l:lines __ "end"
    { Line::If(e, l, None) }

goto -> Line<'input> = "goto" _ n:ident
    { Line::Goto(n) }

label -> Line<'input> = n:ident _ ":"
    { Line::Label(n) }
 
fun_arg -> &'input str = _ i:ident _
    { i }

fun_declaration -> Line<'input> = "func" _ i:ident _ "(" args:(fun_arg ++ ",") ")" __ l:lines __ "end"
    { Line::FunDeclaration(i, args, l) }

expr_line -> Line<'input> = e:fun_call
    { Line::Expr(e) }


// DATA SEGMENT
data_zeros -> DataDef<'input> = "zeros" _ n:$([0-9]+)
    {
        let n = n.parse::<u32>().unwrap();
        DataDef::Bytes(vec![0; n as usize])
    }

data_byte_hex -> u8 = n:$([a-fA-f0-9]*<2>)
    { u8::from_str_radix(n, 16).unwrap() }

data_bytes_hex -> DataDef<'input> = "[" _ bytes:(data_byte_hex ** _ ) _ "]"
    { DataDef::Bytes(bytes) }

data_byte_dec -> DataDef<'input> = n:$([0-9]+)
    { DataDef::Bytes(vec![n.parse::<u8>().unwrap(); 1]) }

data_label -> DataDef<'input> = n:ident _ ":"
    { DataDef::Label(n) }

data_line -> DataDef<'input> = data_zeros / data_bytes_hex / data_byte_dec / data_label

pub data_segment -> DataBlock<'input> = block:(data_line ++ __)
    { block }


pub program -> (DataBlock<'input>, Block<'input>) = ".DATA" __ data:data_segment __ ".CODE"  __ l:lines
    { (data, l) }